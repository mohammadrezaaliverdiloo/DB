def create_index(client, name):
    client.indices.create(index=name)


def index_document(client, index_name, document):
    return client.index(index=index_name, document=document)['_id']


def find_document_by_id(client, index_name, id):
    return client.get(index=index_name, id=id)
	
	

def update_document(client, index_name, document_id, new_document):
    client.update(index=index_name, id=document_id, body={"doc": new_document})
    

def delete_document_fields(client, index_name, document_id, field_names):
    body = {"script": {"source": "", "params": {}}}
    for field in field_names:
        body["script"]["source"] += f"ctx._source.remove('{field}'); "
    client.update(index=index_name, id=document_id, body=body)


def delete_index(client, index_name):
    client.indices.delete(index=index_name)


def delete_document(client, index_name, document_id):
    client.delete(index=index_name, id=document_id)






def remote_jobs(client):
    result_set = client.search(
        index='quera',
        query={
            'term': {
                'offers_remote': True
            },
        },
        sort='id:desc',
    )

    return extract_hits(result_set)


def front_end_jobs(client):
    result_set = client.search(
        index='quera',
        query={
            'match': {
                'title': 'front',
            },
        },
        sort='id:desc',
        size=1000,
    )

    return extract_hits(result_set)


def quera_golden_jobs(client):
    result_set = client.search(
        index='quera',
        query={
            'bool': {
                'must': [
                    {
                        'match': {
                            'title': {
                                'query': 'AI',
                                'boost': 3.0,
                            }
                        }
                    },
                    {
                        'range': {
                            'minimum_salary': {
                                'gte': 30000000,
                                'boost': 2.0,
                            },
                        },
                    },
                    {
                        'term': {
                            'level': {
                                'value': 'senior',
                                'boost': 1.0,
                            }
                        }
                    },
                ],
                'minimum_should_match': 2,
            },
        },
        size=1000,
    )

    return extract_hits(result_set)


def extract_hits(result_set):
    return list(
        map(
            lambda row: row['_source'],
            result_set['hits']['hits'],
        )
    )
